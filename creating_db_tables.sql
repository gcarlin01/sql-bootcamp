-- CREATING DATABASES AND TABLES 

-- Data Types:

-- - Boolean: T or F
-- - Character: char, varchar and text
-- - Numeric: integer and floating-point number
-- - Temporal: date, time, timestamp and interval
-- NOT SO COMMON 
-- - UUID: universallly unique identifiers
-- - Array: Stores an array of srtings, numbers, etc 
-- - JSON
-- - Hstore key-value pair
-- - Special types such as network address and geometric data 


-- PK = Primary key to a table
-- FK = Foreign Key to another table which can be located at the constraints properties/dependencies 
-- Constraints = rules enforced on data columns on table, which prevent invalid data from being entered into the database

-- Column Constraints
-- MOST USED:
-- - NOL NULL: Column cannot have NULL value.
-- - UNIQUE: Ensures that all column values are different.
-- - PRIMARY Key: Uniquely identifies each row/record in a database table
-- - FOREIGN Key: Contraints data based on columns in other tables.
-- - CHECK: Ensures that all values in a column satisfy certain conditions.
-- - EXCLUSION: Ensures that if any 2 rows are compared on the specified column or expression using the specified operator, not all of these comparisons will return TRUE.

-- Table constraints
-- MOST USED:
-- - CHECK: checks a condition when inserting or updating data.
-- - REFERENCES: to contrain the value stores in the complumn that mujst exist in a column in another table.
-- - UNIQUE(column_list): forces the values stored in the columns listed inside the parenthesis to be unique.
-- - PRIMARY KEY(column_list): Allows to define the primary key that consist of multiple columns.



-- CREATE Table syntax
CREATE TABLE table_name (
    column_name TYPE column_constraint,
    column_name TYPE column_constraint,
    table_constraint table_constraint 
)INHERITS existing_table_name;

-- easy example:
CREATE TABLE players (
    player_id SERIAL PRIMARY KEY,
    age SMALLINT NOT NULL
)

--  SERIAL: Logs unique integer entries for you automatically upon insertion. It creates a sequence object and set the next value generated by the sequence as the defaulkt value of the column
--          NOTE: If a row is later removed, the SERIAL data type will not adjust.

CREATE TABLE account(
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
	password VARCHAR(50) NOT NULL,
	email VARCHAR(250) UNIQUE NOT NULL,
	created_on TIMESTAMP NOT NULL,
	last_login TIMESTAMP
)

CREATE TABLE job(
	job_id SERIAL PRIMARY KEY,
	job_name VARCHAR (200) UNIQUE NOT NULL
)

CREATE TABLE account_job(
	user_id INTEGER REFERENCES account(user_id),
	job_id INTEGER REFERENCES job(job_id),
	hire_date TIMESTAMP
	
)


-- INSERT : allows you to add rows to a table

-- INSERT syntax:

INSERT INTO table (column1, column2,.....)
VALUES 
(value1, value2,.....),
(value1, value2,,,,,);

-- When inserting values from another table, keep in mind that:
-- 1. The inserted row valkues must match up for the table, including constraints.
-- 2. SERIAL columns do not need to be provided a value

INSERT INTO table(column1, columns2,...)
SELECT column1, column2,....
FROM another_table
WHERE condition;

-- examples using previously created database:

INSERT INTO account(username, password, email, created_on)
VALUES 
('Jose', 'password', 'jose@mail.com', CURRENT_TIMESTAMP)

INSERT INTO job(job_name)
VALUES 
('Astronaut')

INSERT INTO account_job(user_id, job_id, hire_date)
VALUES 
('1', '1', CURRENT_TIMESTAMP)


-- UPDATE: allows for the changing of values of the column in a table

-- UPDATE Syntax:

UPDATE table
SET column1 = value1,
    column2 = value2,...
WHERE
    condition;


UPDATE account
SET last_login = created_on;

-- UPDATE joins using another table's values:
UPDATE TableA
SET original_col = TableB.new_col
FROM tableB
WHERE tableA.id = TableB.id

UPDATE account
SET last_login = created_on
RETURNING account_id, last_login;

UPDATE account_job
SET hire_date = account.created_on
FROM account
WHERE account_job.user_id = account.user_id;


-- DELETE: removes rows from a table

-- DELETE Syntax:

DELETE FROM table
WHERE row_id = 1 

DELETE FROM tableA
USING TableB
WHERE tableA.id = TableB.id

DELETE FROM table       -- deletes all rows.

-- DELETE can also be used with RETURNING like UPDATE

DELETE FROM job
WHERE job_name = 'Cowboy'
RETURNING job_id, job_name


-- ALTER: Allows for changes to an existing table structure, such as: Adding, dropping or renaming columns, changing a column data type, setting a column values to DEFAULT, renaming, and adding CHECK contraints.

-- ALTER Syntax:

-- Adding column
ALTER TABLE table_name
ADD COLUMN newcol_name

-- Removing column
ALTER TABLE table_name
DROP COLUMN col_name

-- Alter column contraints
ALTER TABLE table_name
ALTER COLUMN col_name
SET DEFAULT value      -- SET NOT NULL  -- DROP NOT NULL -- ADD CONSTRAINT constraint_name

-- Examples:

-- Renaming table

ALTER TABLE information
RENAME TO new_info;


-- Renaming column 

ALTER TABLE new_info
RENAME COLUMN person TO people;


-- Removing a NOT NULL constraint from column

ALTER TABLE new_info
ALTER COLUMN people DROP NOT NULL


-- Setting a column constraint

ALTER TABLE new_info
ALTER COLUMN people SET NOT NULL

-- For more info on ALTER check: https://www.postgresql.org/docs/current/sql-altertable-html


-- DROP: Allow for the complete removal of a column in a table, including indexes and constraints involving the column, however it does not remove columns used in views, triggers or stores procedures (dependencies) without an additional CASCADE clause.

-- DROP Syntax:

ALTER TABLE table_name
DROP COLUMN col_name

ALTER TABLE table_name
DROP COLUMN col_name CASCADE

ALTER TABLE table_name
DROP COLUMN IF EXISTS col_name

ALTER TABLE table_name
DROP COLUMN col_one,
DROP COLUMN col_two

-- Examples:

ALTER TABLE new_info
DROP COLUMN people

ALTER TABLE new_info
DROP COLUMN IF EXISTS people


-- CHECK: allows us to create more customized contraints that adhere to a certain condition such as making sure all inserted integer values fall below a certain threshold.

-- CHECK Syntax:

CREATE TABLE example(
    ex_id SERIAL PRIMARY KEY,
    age SMALLINT CHECK(age>27),
    parent_age SMALLINT CHECK(parent_age > age)
);

-- Examples:

CREATE TABLE employee(
	emp_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	birthdate DATE CHECK(birthdate > '1900-01-01'),
	hire_date DATE CHECK(hire_date > birthdate)
	salary INTEGER CHECK(salary > 0)
)
