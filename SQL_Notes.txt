SQL 

SELECT * FROM film;	// Selects all columns from film table

SELECT * FROM actor;	   // selects all columns from actor table

SELECT last_name, first_name FROM actor;    // selects last_name and first_name columns from actor table

SELECT first_name, last_name, email FROM customer;    // selects last_name, first_name and email columns from customer table

SELECT DISTINCT (release_year) FROM film;    // selects non-repetitive/unique  release_year  columns from film table //** DISTINCT can be used with or without ()

SELECT release_year FROM film;     // selects release_year column from film table

SELECT DISTINCT rental_rate FROM film;

SELECT COUNT (rating) FROM film;      // COUNT is a function that must be used with () and counts the number of rows of desired column

SELECT COUNT (DISTINCT rating) FROM film;     // COUNT can be used with DISTINCT 

SELECT COUNT(*) FROM payment;     // it is very common to see the COUNT with the * since it would throw the same number of rows as the other columns

SELECT * FROM film 
WHERE language_id = '1' AND title = 'Agent Truman';     //WHERE must come right after from, must include single quote and exact name it can be used with AND, OR, and !(for not)		
														
SELECT * FROM customer
ORDER BY store_id, first_name ASC;     // ASC ascending or just leave blank, DESC descending order, also you can pass multiple columns to order by

SELECT * FROM payment
WHERE amount != 0.00
ORDER BY payment_date DESC	    
LIMIT 5;                            // gets 5 latest payments using DESC (latest/recent) WHERE the payment was not $0 and LIMIT set to 5 

 SELECT COUNT(*) FROM payment	   
WHERE amount BETWEEN 8 AND 9;       // count of payment amount using BETWEEN and NOT BETWEEN


SELECT COUNT(*) FROM payment
WHERE payment_date BETWEEN '2007-02-01' AND '2007-02-15';      // count of all payments done between Feb 1st and 15 (BETWEEN is exclusive, so no transactions 																	done on the 15 will show up,  in contrast NOT BETWEEN is Inclusive

SELECT COUNT(*) FROM payment
WHERE amount IN (0.99, 1.99, 1.98);      // Instead of doing WHERE …AND …AND, just use IN for multiple WHERE statements, it can be used with NOT as well as NOT IN 

SELECT * FROM customer
WHERE first_name LIKE 'J%' AND last_name LIKE 'S%';      // LIKE = case sensitive uses _ wildcard for any 1 letter and % for any number of letters and ILIKE does the 															same but is case unsensitive, % takes blank as well. LIKE and ILIKE also take the NOT operator 


Challenge Questions: 
1. How many payment transactions were greater than $5.00?

SELECT COUNT(*) FROM payment
WHERE amount > 5.00;

2. How many actors have a first name that starts with the letter P?

SELECT COUNT(*) FROM actor
WHERE first_name LIKE 'P%';

3. How many unique districts are our customers from?

SELECT COUNT (DISTINCT(district)) FROM address;

4. Retrieve the list of names fro those distinct districts from the previous question

SELECT DISTINCT(district) FROM address;

5. How many films have a rating of R and a replacement cost between $5 and $15?

SELECT COUNT(*) FROM film
WHERE rating = 'R'
AND replacement_cost BETWEEN 5 AND 15;

6. How many films have the word Truman somewhere in the title?

SELECT COUNT(*) FROM film
WHERE title LIKE '%Truman%';


Most Common Aggregate Functions: // Aggregate function calls happen only in the SELECT or HAVING clause.
- AVG() = average returns a floating point value with many decimal places, might be best to use with ROUND() to specify precision after the decimal
- COUNT()
- MAX()
- MIN()
- SUM()


SELECT MIN(replacement_cost) FROM film;      // Minimum replacement cost for a film, MIN and MAX only returns a single value

SELECT MAX(replacement_cost), MIN(replacement_cost)
FROM film;                                                // This will come back as two values MIN and MAX 

SELECT ROUND(AVG(replacement_cost), 2)
FROM film;                                          // AVG of replacement_cost rounded up to 2 decimal 

SELECT SUM(replacement_cost)
FROM film;                                      // SUM of replacement_cost

SELECT customer_id,SUM(amount)
FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;                                    // What are the top 5 customer ids that are expending the most amount of money

SELECT DATE(payment_date),SUM(amount)
FROM payment
GROUP BY DATE(payment_date)
ORDER BY SUM(amount) DESC;                  // DATE function returns the day for any timestamp (sec,min,hrs). What specific dates did we collect the most payment amounts


Challenge Questions:

1. How many payments did each staff member handle and who gets the bonus?

SELECT staff_id,COUNT(amount)
FROM payment
GROUP BY staff_id
ORDER BY COUNT(amount)DESC

2. What is the average replacement cost per MPAA rating?

SELECT rating, ROUND(AVG(replacement_cost), 2) 
FROM film
GROUP BY rating;

3. What are the customer ids of the top 5 customers by total spend?

SELECT customer_id, SUM(amount) 
FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;


SELECT customer_id, SUM(amount)
FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 100;               // Using HAVING which comes after GROUP BY since WHERE comes before the GROUP BY and could not be used with SUM(amount) 


Challenge Questions: 

1. What customer_ids are elegible for platinum status(40 or more transaction payments)?

SELECT customer_id, COUNT(amount)
FROM payment
GROUP BY customer_id
HAVING COUNT(amount) >= 40;

2. What are the customer_ids of customers who have spent more than $100 in payment transactions with our staff_id member 2?

SELECT customer_id, SUM(amount)
FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 100;


Assessment test:

1. Return the customer_ids of customers who have spent at least $110 with the staff member who has an id of 2?
2. How many films begin with the letter J?
3. What customer has the highest customer Id number whise name starts with an E and has an address Id lower than 500?

My answers: 
1.
SELECT customer_id, SUM(amount)
FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) >= 110;

2. 
SELECT COUNT(title) FROM film
WHERE title LIKE 'J%';

3. 
SELECT first_name, last_name FROM customer
WHERE first_name LIKE 'E%' AND address_id < 500
ORDER BY customer_id DESC
LIMIT 1;


SELECT SUM(amount) AS net_revenue
FROM payment;                              // set a new name (net_revenue) for your column. the AS statement can only be present in the SELECT  


SELECT payment_id, payment.customer_id, first_name 
FROM payment
INNER JOIN customer
ON payment.customer_id = customer.customer_id; // Inner Join joins both tables and returns whatever you select based on mutual customer_id in this case.


SELECT * FROM customer
FULL OUTER JOIN payment
ON customer.customer_id = payment.customer_id
WHERE customer.customer_id IS null 
OR payment.customer_id IS null;             // Outer Join joins everything but when used with WHERE and setting the parallel values to null throws the not common elements of the join


SELECT film.film_id, title, inventory_id
FROM film  
LEFT OUTER JOIN inventory 
ON inventory.film_id = film.film_id
WHERE inventory.film_id IS null;           // LEFT OUTER JOIN or LEFT JOIN when used with when and setting table b column value to null gives you only the value for table a that is NOT in table b 


SELECT film.film_id, title, inventory_id
FROM film  
RIGHT OUTER JOIN inventory 
ON inventory.film_id = film.film_id
WHERE film.film_id IS null;                 // Same concept as LEFT OUTER JOIN


SELECT * FROM Sales2021_Q1
UNION
SELECT * FROM Sales2021_Q2                 // Union joins two tables together


Challenge Questions:

1. What are the emails of the customers who live in California?

SELECT email FROM customer
INNER JOIN address
ON customer.address_id = address.address_id
WHERE address.district = 'California';

2. Get a list of all movies "Nick Wahlberg" has been in.

SELECT title, actor.first_name, actor.last_name FROM film
INNER JOIN film_actor ON film.film_id = film_actor.film_id
INNER JOIN actor ON film_actor.actor_id = actor.actor_id
WHERE actor.first_name = 'Nick' AND actor.last_name = 'Wahlberg'



TIME - contains only time (hours, minutes and seconds)
DATE - contains only the dates
TIMESTAMP - contains date and time 
TIMESTAMPTZ - contains date, time and timezone


SHOW ALL                  // runtime parameters

SHOW TIMEZONE             // shows my timezone

SELECT NOW()              // returns timestamp with timezone

SELECT TIMEOFDAY()        // returns same info as NOW() but as string 

SELECT CURRENT_TIME       // returns current time with timezone 

SELECT CURRENT_DATE       // returns current date 


SELECT EXTRACT(YEAR FROM payment_date)
AS myyear
FROM payment                            // EXTRACT extracts a sub-component of a date value. We can extract YEAR, MONTH, QUARTER, ETC..


SELECT AGE(payment_date)
FROM payment                            // AGE returns how old a date is.


SELECT TO_CHAR(payment_date, 'MONTH-YYY')
FROM payment                               // TO_CHAR() is a general function to convert data types to text.
                                           // Patterns of output must be inculded, for more info:  https://www.postgresql.org/docs/12/functions-formatting-html  


Challenge Questions:

1. During which months did payments occur? Format your answer to return back the full month name

SELECT DISTINCT(TO_CHAR(payment_date, 'MONTH'))
FROM payment

2. How many payments ocurred on a Monday?

SELECT COUNT(*)
FROM payment
WHERE TO_CHAR(payment_date, 'D') = '2'

or 

Select COUNT(*)
FROM payment 
WHERE EXTRACT(dow FROM payment_date) = 1


For mathematical functions refer to:  https://www.postgresql.org/docs/12/functions-math.html

SELECT ROUND(rental_rate/replacement_cost, 4)*100
AS percent_cost
FROM film                       // Gettting the percentage of the rental_rate on regards of the film replacement_cost.


For string functions and operators refer to:  https://www.postgresql.org/docs/12/functions-string.html

SELECT LENGTH(first_name)
FROM customer;                // self-explanatory..


SELECT first_name || ' ' || upper(last_name)
AS full_name
FROM customer                 //  String concatination setting las_name in upper case


creating custom emails:

SELECT LOWER(LEFT(first_name, 1)) || LOWER(last_name) || '@mycompany.com'
AS custom_email
FROM customer;                // output= "jely@mycompany.com""msmith@mycompany.com"


Sub-querying:

SELECT student, grade
FROM test_scores
WHERE garde > (SELECT AVG(grade)
FROM test_scores)               // How can we get a list of students who scored better than the average grade?
                            

SELECT title, rental_rate
FROM film
WHERE rental_rate >
(SELECT AVG(rental_rate) FROM film)


SELECT student, grade
FROM test_scores
WHERE student IN(SELECT student
FROM honor_roll_table)              // IN can be used here in sort of join functionality for multiple results


SELECT film_id, title
FROM film
WHERE film_id IN
(SELECT inventory.film_id
FROM rental
INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
WHERE return_date BETWEEN '2005-05-29' AND '2005-05-30')

SELECT column_name
FROM table_name
WHERE EXISTS 
(SELECT column_name 
FROM table_name
WHERE condition)                    // EXISTS used in subquery which expects a true validation
                                    // NOT EXISTS same but expects a false validation 

SELECT first_name, last_name
FROM customer AS c
WHERE EXISTS                        // NOT EXISTS 
(SELECT * FROM payment AS p
WHERE p.customer_id = c.customer_id
AND amount > 11)
        
Self-Join: 
SELECT f1.title, f2.title, f1.length
FROM film AS f1
INNER JOIN film AS f2 
ON f1.film_id != f2.film_id
AND f1.length = f2.length         // creates a join to itslef, must add allias AS to differentiate


Assessment Test 2:

1. How can you retrieve all the information from the cd.facilities table?

SELECT * FROM cd.facilities

2. You want to print out a list of all of the facilities and their cost to members. How would you retrieve a list of only facility names and costs?

SELECT name, membercost FROM cd.facilities

3. How can you produce a list of facilities that charge a fee to members?

SELECT name FROM cd.facilities
WHERE membercost != 0;

4. How can you produce a list of facilities that charge a fee to members, and that fee is less than 1/50th of the monthly maintenance cost? Return the facid, facility name, member cost, and monthly maintenance of the facilities in question.

SELECT facid, name, membercost, monthlymaintenance
FROM cd.facilities
WHERE membercost != 0 
AND membercost < monthlymaintenance/50 

5. How can you produce a list of all facilities with the word 'Tennis' in their name?

SELECT * FROM cd.facilities
WHERE name LIKE '%Tennis%'

6. How can you retrieve the details of facilities with ID 1 and 5? Try to do it without using the OR operator

SELECT * FROM cd.facilities
WHERE facid IN(1, 5);

7. How can you produce a list of members who joined after the start of September 2012? Return the memid, surname, firstname, and joindate of the members in question.

SELECT memid, surname, firstname, joindate FROM cd.members
WHERE joindate > '2012-08-30'

8. How can you produce an ordered list of the first 10 surnames in the members table? The list must not contain duplicates.

SELECT DISTINCT(surname) FROM cd.members
ORDER BY surname
LIMIT 10;

9. You'd like to get the signup date of your last member. How can you retrieve this information?

SELECT joindate FROM cd.members
ORDER BY joindate DESC
LIMIT 1;

or 

SELECT MAX(joindate) FROM cd.members

10. Produce a count of the number of facilities that have a cost to guests of 10 or more.

SELECT COUNT(*) FROM cd.facilities
WHERE guestcost >= 10;

11. Produce a list of the total number of slots booked per facility in the month of September 2012. Produce an output table consisting of facility id and slots, sorted by the number of slots.

SELECT facid, SUM(slots) AS total_slots
FROM cd.bookings
WHERE TO_CHAR(starttime, 'MM/YYYY') = '09/2012'
GROUP BY facid
ORDER BY SUM(slots)

12. Produce a list of facilities with more than 1000 slots booked. Produce an output table consisting of facility id and total slots, sorted by facility id.

SELECT facid, SUM(slots) AS total_slots
FROM cd.bookings
GROUP BY facid
HAVING SUM(slots) > 1000
ORDER BY facid;

13. How can you produce a list of the start times for bookings for tennis courts, for the date '2012-09-21'? Return a list of start time and facility name pairings, ordered by the time.

SELECT f2.name, starttime
FROM cd.bookings AS f1
INNER JOIN cd.facilities AS f2
ON f1.facid = f2.facid
WHERE DATE(f1.starttime) = '2012-09-21' 
AND name LIKE '%Tennis Court%'
ORDER BY starttime

14. How can you produce a list of the start times for bookings by members named 'David Farrell'?

SELECT starttime, f2.firstname || ' ' || f2.surname AS fullname
FROM cd.bookings AS f1
INNER JOIN cd.members AS f2
ON f1.memid = f2.memid
WHERE firstname = 'David' AND surname = 'Farrell';


CREATING DATABASES AND TABLES 

Data Types:

- Boolean: T or F
- Character: char, varchar and text
- Numeric: integer and floating-point number
- Temporal: date, time, timestamp and interval
NOT SO COMMON 
- UUID: universallly unique identifiers
- Array: Stores an array of srtings, numbers, etc 
- JSON
- Hstore key-value pair
- Special types such as network address and geometric data 


PK = Primary key to a table
FK = Foreign Key to another table which can be located at the constraints properties/dependencies 
Constraints = rules enforced on data columns on table, which prevent invalid data from being entered into the database

Column Constraints
MOST USED:
- NOL NULL: Column cannot have NULL value.
- UNIQUE: Ensures that all column values are different.
- PRIMARY Key: Uniquely identifies each row/record in a database table
- FOREIGN Key: Contraints data based on columns in other tables.
- CHECK: Ensures that all values in a column satisfy certain conditions.
- EXCLUSION: Ensures that if any 2 rows are compared on the specified column or expression using the specified operator, not all of these comparisons will return TRUE.

Table constraints
MOST USED:
- CHECK: checks a condition when inserting or updating data.
- REFERENCES: to contrain the value stores in the complumn that mujst exist in a column in another table.
- UNIQUE(column_list): forces the values stored in the columns listed inside the parenthesis to be unique.
- PRIMARY KEY(column_list): Allows to define the primary key that consist of multiple columns.


CREATE Table syntax
CREATE TABLE table_name (
    column_name TYPE column_constraint,
    column_name TYPE column_constraint,
    table_constraint table_constraint 
)INHERITS existing_table_name;

easy example:
CREATE TABLE players (
    player_id SERIAL PRIMARY KEY,
    age SMALLINT NOT NULL
)

 SERIAL: Logs unique integer entries for you automatically upon insertion. It creates a sequence object and set the next value generated by the sequence as the defaulkt value of the column
         NOTE: If a row is later removed, the SERIAL data type will not adjust.

CREATE TABLE account(
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
	password VARCHAR(50) NOT NULL,
	email VARCHAR(250) UNIQUE NOT NULL,
	created_on TIMESTAMP NOT NULL,
	last_login TIMESTAMP
)

CREATE TABLE job(
	job_id SERIAL PRIMARY KEY,
	job_name VARCHAR (200) UNIQUE NOT NULL
)

CREATE TABLE account_job(
	user_id INTEGER REFERENCES account(user_id),
	job_id INTEGER REFERENCES job(job_id),
	hire_date TIMESTAMP
	
)


INSERT : allows you to add rows to a table

INSERT syntax:

INSERT INTO table (column1, column2,.....)
VALUES 
(value1, value2,.....),
(value1, value2,,,,,);

When inserting values from another table, keep in mind that:
1. The inserted row valkues must match up for the table, including constraints.
2. SERIAL columns do not need to be provided a value

INSERT INTO table(column1, columns2,...)
SELECT column1, column2,....
FROM another_table
WHERE condition;

examples using previously created database:

INSERT INTO account(username, password, email, created_on)
VALUES 
('Jose', 'password', 'jose@mail.com', CURRENT_TIMESTAMP)

INSERT INTO job(job_name)
VALUES 
('Astronaut')

INSERT INTO account_job(user_id, job_id, hire_date)
VALUES 
('1', '1', CURRENT_TIMESTAMP)