SQL 

SELECT * FROM film;	// Selects all columns from film table

SELECT * FROM actor;	   // selects all columns from actor table

SELECT last_name, first_name FROM actor;    // selects last_name and first_name columns from actor table

SELECT first_name, last_name, email FROM customer;    // selects last_name, first_name and email columns from customer table

SELECT DISTINCT (release_year) FROM film;    // selects non-repetitive/unique  release_year  columns from film table //** DISTINCT can be used with or without ()

SELECT release_year FROM film;     // selects release_year column from film table

SELECT DISTINCT rental_rate FROM film;

SELECT COUNT (rating) FROM film;      // COUNT is a function that must be used with () and counts the number of rows of desired column

SELECT COUNT (DISTINCT rating) FROM film;     // COUNT can be used with DISTINCT 

SELECT COUNT(*) FROM payment;     // it is very common to see the COUNT with the * since it would throw the same number of rows as the other columns

SELECT * FROM film 
WHERE language_id = '1' AND title = 'Agent Truman';     //WHERE must come right after from, must include single quote and exact name it can be used with AND, OR, and !(for not)		
														
SELECT * FROM customer
ORDER BY store_id, first_name ASC;     // ASC ascending or just leave blank, DESC descending order, also you can pass multiple columns to order by

SELECT * FROM payment
WHERE amount != 0.00
ORDER BY payment_date DESC	    
LIMIT 5;                            // gets 5 latest payments using DESC (latest/recent) WHERE the payment was not $0 and LIMIT set to 5 

 SELECT COUNT(*) FROM payment	   
WHERE amount BETWEEN 8 AND 9;       // count of payment amount using BETWEEN and NOT BETWEEN


SELECT COUNT(*) FROM payment
WHERE payment_date BETWEEN '2007-02-01' AND '2007-02-15';      // count of all payments done between Feb 1st and 15 (BETWEEN is exclusive, so no transactions 																	done on the 15 will show up,  in contrast NOT BETWEEN is Inclusive

SELECT COUNT(*) FROM payment
WHERE amount IN (0.99, 1.99, 1.98);      // Instead of doing WHERE …AND …AND, just use IN for multiple WHERE statements, it can be used with NOT as well as NOT IN 

SELECT * FROM customer
WHERE first_name LIKE 'J%' AND last_name LIKE 'S%';      // LIKE = case sensitive uses _ wildcard for any 1 letter and % for any number of letters and ILIKE does the 															same but is case unsensitive, % takes blank as well. LIKE and ILIKE also take the NOT operator 


Challenge Questions: 
1. How many payment transactions were greater than $5.00?

SELECT COUNT(*) FROM payment
WHERE amount > 5.00;

2. How many actors have a first name that starts with the letter P?

SELECT COUNT(*) FROM actor
WHERE first_name LIKE 'P%';

3. How many unique districts are our customers from?

SELECT COUNT (DISTINCT(district)) FROM address;

4. Retrieve the list of names fro those distinct districts from the previous question

SELECT DISTINCT(district) FROM address;

5. How many films have a rating of R and a replacement cost between $5 and $15?

SELECT COUNT(*) FROM film
WHERE rating = 'R'
AND replacement_cost BETWEEN 5 AND 15;

6. How many films have the word Truman somewhere in the title?

SELECT COUNT(*) FROM film
WHERE title LIKE '%Truman%';


Most Common Aggregate Functions: // Aggregate function calls happen only in the SELECT or HAVING clause.
- AVG() = average returns a floating point value with many decimal places, might be best to use with ROUND() to specify precision after the decimal
- COUNT()
- MAX()
- MIN()
- SUM()


SELECT MIN(replacement_cost) FROM film;      // Minimum replacement cost for a film, MIN and MAX only returns a single value

SELECT MAX(replacement_cost), MIN(replacement_cost)
FROM film;                                                // This will come back as two values MIN and MAX 

SELECT ROUND(AVG(replacement_cost), 2)
FROM film;                                          // AVG of replacement_cost rounded up to 2 decimal 

SELECT SUM(replacement_cost)
FROM film;                                      // SUM of replacement_cost

SELECT customer_id,SUM(amount)
FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;                                    // What are the top 5 customer ids that are expending the most amount of money

SELECT DATE(payment_date),SUM(amount)
FROM payment
GROUP BY DATE(payment_date)
ORDER BY SUM(amount) DESC;                  // DATE function returns the day for any timestamp (sec,min,hrs). What specific dates did we collect the most payment amounts


Challenge Questions:

1. How many payments did each staff member handle and who gets the bonus?

SELECT staff_id,COUNT(amount)
FROM payment
GROUP BY staff_id
ORDER BY COUNT(amount)DESC

2. What is the average replacement cost per MPAA rating?

SELECT rating, ROUND(AVG(replacement_cost), 2) 
FROM film
GROUP BY rating;

3. What are the customer ids of the top 5 customers by total spend?

SELECT customer_id, SUM(amount) 
FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;


SELECT customer_id, SUM(amount)
FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 100;               // Using HAVING which comes after GROUP BY since WHERE comes before the GROUP BY and could not be used with SUM(amount) 


Challenge Questions: 

1. What customer_ids are elegible for platinum status(40 or more transaction payments)?

SELECT customer_id, COUNT(amount)
FROM payment
GROUP BY customer_id
HAVING COUNT(amount) >= 40;

2. What are the customer_ids of customers who have spent more than $100 in payment transactions with our staff_id member 2?

SELECT customer_id, SUM(amount)
FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 100;


Assessment test:

1. Return the customer_ids of customers who have spent at least $110 with the staff member who has an id of 2?
2. How many films begin with the letter J?
3. What customer has the highest customer Id number whise name starts with an E and has an address Id lower than 500?

My answers: 
1.
SELECT customer_id, SUM(amount)
FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) >= 110;

2. 
SELECT COUNT(title) FROM film
WHERE title LIKE 'J%';

3. 
SELECT first_name, last_name FROM customer
WHERE first_name LIKE 'E%' AND address_id < 500
ORDER BY customer_id DESC
LIMIT 1;


SELECT SUM(amount) AS net_revenue
FROM payment;                              // set a new name (net_revenue) for your column. the AS statement can only be present in the SELECT  


SELECT payment_id, payment.customer_id, first_name 
FROM payment
INNER JOIN customer
ON payment.customer_id = customer.customer_id; // Inner Join joins both tables and returns whatever you select based on mutual customer_id in this case.


SELECT * FROM customer
FULL OUTER JOIN payment
ON customer.customer_id = payment.customer_id
WHERE customer.customer_id IS null 
OR payment.customer_id IS null;             // Outter Join joins everything but when used with WHERE and setting the parallel values to null throws the not common elements of the join


SELECT film.film_id, title, inventory_id
FROM film  
LEFT OUTER JOIN inventory 
ON inventory.film_id = film.film_id
WHERE inventory.film_id IS null;           // LEFT OUTTER JOIN or LEFT JOIN when used with when and setting table b column value to null gives you only the value for table a that is NOT in table b 


SELECT film.film_id, title, inventory_id
FROM film  
RIGHT OUTER JOIN inventory 
ON inventory.film_id = film.film_id
WHERE film.film_id IS null;                 // Same concept as LEFT OUTTER JOIN